@page "/patient-grid"
@using PatientPortalApp.Services
@using PatientPortalApp.Data
@using PatientPortalApp.Models
@using System.ComponentModel.DataAnnotations

@inherits LayoutComponentBase
@inject IPatientService patientService

<h3>Patients</h3>
@if (list == null)
{
    <Spinner />
}
else
{
    <a class="expand-holder" style="cursor:pointer" @onclick="@(() => ToggleSearch())">@(@expand ? "Expand >" : "Collapse <")</a>
    <Collapse @ref="search" Class="search-container">
        <Card>
            <CardBody>
                <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">First Name: </label>
                        <div class="col-md-10">
                            <InputText class="form-control" @bind-Value="searchForm.FirstName" Placeholder="Enter First Name" />
                        </div>
                    </div>

                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">Last Name: </label>
                        <div class="col-md-10">
                            <InputText class="form-control" @bind-Value="searchForm.LastName" Placeholder="Enter Last Name" />
                        </div>
                    </div>

                    <div class="form-group row mb-3">
                        <label class="col-md-2 col-form-label">Active: </label>
                        <div class="col-md-10">
                            <InputSelect class="form-select mb-3" @bind-Value="searchForm.IsActive">
                                <option value="">All</option>
                                <option value="true">Yes</option>
                                <option value="false">No</option>
                            </InputSelect>


                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12 button-holder">
                            <Button Type="ButtonType.Submit" Color="ButtonColor.Success" Class="me-2">Search</Button>
                            <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="me-2" @onclick="ResetForm">Reset</Button>
                        </div>
                    </div>
                </EditForm>
            </CardBody>
        </Card>
    </Collapse>
    <div class="grid-button-container">
        <a href="patient-form">
            <Icon Name="IconName.PlusSquare" />
        </a>
    </div>

    <Grid @ref="patientDataGridRef"
          TItem="PatientModel"
          Class="table table-hover table-bordered table-striped"
          DataProvider="GridDataProvider"
          AllowPaging="true"
          PageSize="10"
          AllowSorting="true"
          Responsive="true">

        @*
    <GridColumn TItem="DoctorModel" HeaderText="Identifier" SortString="LocationIdentifier" SortKeySelector="item => item.UserIdentifier" PropertyName="UserIdentifier">
    @context.UserIdentifier
    </GridColumn> *@
        <GridColumn TItem="PatientModel" HeaderText="First Name" SortString="FirstName" SortKeySelector="item => item.FirstName" PropertyName="FirstName">
            @context.FirstName
        </GridColumn>
        <GridColumn TItem="PatientModel" HeaderText="Last Name" SortString="LastName" SortKeySelector="item => item.LastName" PropertyName="LastName">
            @context.LastName
        </GridColumn>
        <GridColumn TItem="PatientModel" HeaderText="Provider Number" SortString="ProviderNumber" SortKeySelector="item => item.MedicareNumber" PropertyName="ProviderNumber">
            @context.MedicareNumber
        </GridColumn>
        <GridColumn TItem="PatientModel" HeaderText="Mobile" SortString="MobileNumber" SortKeySelector="item => item.MobileNumber" PropertyName="MobileNumber">
            @context.MobileNumber
        </GridColumn>
        <GridColumn TItem="PatientModel" HeaderText="Email" SortString="EmailAddress" SortKeySelector="item => item.EmailAddress" PropertyName="EmailAddress">
            @context.EmailAddress
        </GridColumn>
        <GridColumn TItem="PatientModel" HeaderText="Enabled" SortString="IsActive" SortKeySelector="item => item.IsActive" PropertyName="IsActive">
            <HeaderContent>
                Active
            </HeaderContent>
            <ChildContent>
                <Switch @bind-Value="@context.IsActive" @onclick="@(() => Switch(context.PatientId))" />
            </ChildContent>

        </GridColumn>

    </Grid>
    
}


@code {
    private PatientSearchModel searchForm = new();
    private EditContext? editContext;
    private IEnumerable<PatientModel>? list = null;
    private Modal modal = default!;
    private PatientModel? rec;
    private Collapse search = default!;
    private bool expand = true;
    private Grid<PatientModel> patientDataGridRef = default!;
    private int pagesize = 10;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(searchForm);
        list = await patientService.GetPage(new PatientSearchModel(), null!, 1, pagesize);
    }

    private async Task ToggleSearch()
    {
        await search.ToggleAsync();
        expand = !expand;
    }

    private void ResetForm()
    {
        searchForm = new();
        editContext = new EditContext(searchForm);

    }

    private async Task Switch(int id)
    {
        await patientService.Switch(id);
    }

    public async Task HandleOnValidSubmit()
    {
        await patientDataGridRef.RefreshDataAsync();
    }

    private async Task<GridDataProviderResult<PatientModel>> GridDataProvider(GridDataProviderRequest<PatientModel> request)
    {
        PatientSearchModel model = new PatientSearchModel()
            {
                FirstName = searchForm.FirstName?.ToLower(),
                LastName = searchForm.LastName?.ToLower(),
                IsActive = searchForm.IsActive
            };
        list = await patientService.GetPage(model, request.Sorting, request.PageNumber, request.PageSize);
        int total = await patientService.GetTotalRecords(model);
        return (new GridDataProviderResult<PatientModel> { Data = list, TotalCount = total });
    }
}
